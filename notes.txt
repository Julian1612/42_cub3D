-------------knowledge--------------
- sin und cos werte ergeben sich aus dem einheitskreis und sind immer zwischen -1 und 1
	- sin und cos werte sind die x und y werte eines punktes auf dem kreis
	- sin ist y und cos ist x
- winkel eines rechtwinkligen dreiecks
	- sin = gegenkathete/hypotenuse
	- cos = ankathete/hypotenuse
	- tan = gegenkathete/ankathete
		- tan ist der rechte winkel
	- grad wert = sin^-1(ergebnis)
	-> für jeden winkel werden 2 seitenlängen benötigt
- player->y += cos(player->view_dir) * ROT_SPEED;
	- Erklärung: player->y bewegt sich in die richtung des winkels player->view_dir
- mit cos(winkel) erhält man den schnittpunkt des vektors mit dem einheitskreis


--------------raycasting--------------
values that have to be determined:
- player position (x,y)
- player direction (angle)
- player field of view (angle)
- ray angle (angle)
- nearest y intersection (y)
- nearest x intersection (x)
- standard y intersection (length)
- standard x intersection (length)
- ray length (distance)
	- distance from player to nearest wall at given angle
- block size (size)	
	- height/width of a block in the map
- block size relative to ray length (size)
	- height/width of a block in the map relative to the distance from the player to the wall


--------------refactoring--------------
- cast_ray will return a struct, containing:
	- distance to wall
	- coors of hit
	- texture or object being hit?
		- pro enum
			- just a number can be passed
			- number represents texture in array


--------------collision detection--------------
- if player hits wall on x axis, stop movement on x axis
- if player hits wall on y axis, stop movement on y axis


--------------sprites--------------
- they don't have to be on the edge of a block
- they have a collision box
- they always face the player
- they can be half-covered by another object, such as walls
-----sprite collision
	- simple: just check if dist to sprite is less than size of sprite


--------------doors--------------
- doors only open if view dir is directly pointing at the front texture
- doors only open if player is less than a block away
- door opens/closes when space bar is pressed
- door closes after some time but only if player is not inside the block
- door lets player pass only after being fully open

- the front is not facing the player - is it a sprite?
	- it is probably a special case of a sprite

- how to interact with them?
	- if 
		- central ray hits sprite
		- space is pressed
		- distance to door < 1
	- then switch state
	- if x amount of time has passed, switch state

- how to make them movable?
	- the front of the door is a sprite
	- the sprite is moved if the state of the door is switched

- how to show different textures on the side
	- the side of the door texture will be set in the set_hit_wall_id function






- multiple sprites
- offset sprites
- enemy data structure
- sorted sprites and enemies
- enemy animation
- enemy movement
- enemy ai
- weapon mechanics


- decision: separate enemy and object data structures or one?
	- one data structure is easier to sort

	- two data structures will make enemy updating easier

- decision: lists or arrays?
	- list is easier to iterate through

	- array is easier to sort
	- array is easier to access


==============TODO==============
- zombies
- doors
- animations
- weapon mechanics
- hud